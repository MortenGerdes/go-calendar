// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package calendarv2_test

import (
	"calendar/calendar_v2"
	"context"
	"sync"
)

// Ensure, that EventResolverMock does implement calendarv2.EventResolver.
// If this is not the case, regenerate this file with moq.
var _ calendarv2.EventResolver = &EventResolverMock{}

// EventResolverMock is a mock implementation of calendarv2.EventResolver.
//
//	func TestSomethingThatUsesEventResolver(t *testing.T) {
//
//		// make and configure a mocked calendarv2.EventResolver
//		mockedEventResolver := &EventResolverMock{
//			GetEventsTodayFunc: func(ctx context.Context) (calendarv2.Events, error) {
//				panic("mock out the GetEventsToday method")
//			},
//		}
//
//		// use mockedEventResolver in code that requires calendarv2.EventResolver
//		// and then make assertions.
//
//	}
type EventResolverMock struct {
	// GetEventsTodayFunc mocks the GetEventsToday method.
	GetEventsTodayFunc func(ctx context.Context) (calendarv2.Events, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetEventsToday holds details about calls to the GetEventsToday method.
		GetEventsToday []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockGetEventsToday sync.RWMutex
}

// GetEventsToday calls GetEventsTodayFunc.
func (mock *EventResolverMock) GetEventsToday(ctx context.Context) (calendarv2.Events, error) {
	if mock.GetEventsTodayFunc == nil {
		panic("EventResolverMock.GetEventsTodayFunc: method is nil but EventResolver.GetEventsToday was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetEventsToday.Lock()
	mock.calls.GetEventsToday = append(mock.calls.GetEventsToday, callInfo)
	mock.lockGetEventsToday.Unlock()
	return mock.GetEventsTodayFunc(ctx)
}

// GetEventsTodayCalls gets all the calls that were made to GetEventsToday.
// Check the length with:
//
//	len(mockedEventResolver.GetEventsTodayCalls())
func (mock *EventResolverMock) GetEventsTodayCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetEventsToday.RLock()
	calls = mock.calls.GetEventsToday
	mock.lockGetEventsToday.RUnlock()
	return calls
}
